services:
  movie_service:
    image: tdksoft/devops-eval-movie-service:${TAG:-latest}  # Dynamic tag
    build: 
      context: ./movie-service
      dockerfile: Dockerfile
    container_name: movie_service
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./movie-service/:/app/
    ports:
      - 8001:8000
    environment:
      - DATABASE_URI=postgresql://${MOVIE_DB_USERNAME}:${MOVIE_DB_PASSWORD}@movie_db/${MOVIE_DB_NAME}
      - CAST_SERVICE_HOST_URL=http://cast_service:8000/api/v1/casts/
      - LOG_LEVEL=INFO
    depends_on:
      movie_db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  movie_db:
    image: postgres:15-alpine
    container_name: movie_db
    volumes:
      - postgres_data_movie:/var/lib/postgresql/data/
      - ./movie-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${MOVIE_DB_USERNAME}
      - POSTGRES_PASSWORD=${MOVIE_DB_PASSWORD}
      - POSTGRES_DB=${MOVIE_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MOVIE_DB_USERNAME} -d ${MOVIE_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  cast_service:
    image: tdksoft/devops-eval-cast-service:${TAG:-latest}  # Dynamic tag
    build: 
      context: ./cast-service
      dockerfile: Dockerfile
    container_name: cast_service
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./cast-service/:/app/
    ports:
      - 8002:8000
    environment:
      - DATABASE_URI=postgresql://${CAST_DB_USERNAME}:${CAST_DB_PASSWORD}@cast_db/${CAST_DB_NAME}
      - LOG_LEVEL=INFO
    depends_on:
      cast_db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  cast_db:
    image: postgres:15-alpine
    container_name: cast_db
    volumes:
      - postgres_data_cast:/var/lib/postgresql/data/
      - ./cast-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${CAST_DB_USERNAME}
      - POSTGRES_PASSWORD=${CAST_DB_PASSWORD}
      - POSTGRES_DB=${CAST_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CAST_DB_USERNAME} -d ${CAST_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "8081:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - cast_service
      - movie_service
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data_movie:
  postgres_data_cast:

networks:
  app-network:
    driver: bridge